// Gradle plugins
buildscript {
    repositories {
        maven {
            url = 'https://dl.bintray.com/lanternpowered/maven/'
        }
    }
    dependencies {
        classpath 'org.lanternpowered:lanterngradle:1.0.0'
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'com.github.johnrengelman.shadow' version '1.2.4'
    id 'org.spongepowered.plugin' version '0.8.1'
}

apply from: rootProject.file('gradle/lantern.gradle')

// Apply plugin
apply plugin: 'org.lanternpowered.gradle'
apply plugin: 'org.lanternpowered.run-configs'

// Basic project information
archivesBaseName = 'lanternserver'
version = '1.0.0-SNAPSHOT'

// Repositories
repositories {
    mavenCentral()
    maven {
        url 'http://repo.spongepowered.org/maven'
    }
    maven {
        url 'https://oss.sonatype.org/content/groups/public'
    }
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

sourceSets {
    java6 {
        compileClasspath += main.compileClasspath + main.output
        runtimeClasspath += main.runtimeClasspath + main.output
    }
}

compileJava6Java {
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'
}

// Disable some tasks to make the building go faster
api.tasks.javadoc.enabled = false
api.tasks.javadocJar.enabled = false
api.tasks.checkstyleMain.enabled = false
api.tasks.checkstyleTest.enabled = false
// Disable this task to avoid that we turn the dependency
// dirty when we call this on our project
api.tasks.wrapper.enabled = false

configurations {
    fastutil
    compile {
        extendsFrom fastutil
    }
}

ext.testDataPacks = project(':test-data-packs')
ext.testPlugins = project(':test-plugins')
ext.fastutilVersion = '7.1.0'
// Project dependencies
dependencies {
    // Add the test plugins to the class path
    compile testPlugins
    // Add the test data packs to the class path
    compile testDataPacks

    // Launch Options
    compile 'net.sf.jopt-simple:jopt-simple:5.0.3'

    // Useful libraries
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.google.guava:guava:21.0'

    // Injection
    compile 'com.google.inject:guice:4.1.0'

    // Json library
    compile 'com.google.code.gson:gson:2.8.0'

    // Network
    compile 'io.netty:netty-all:4.1.12.Final'

    // Logging
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.1'
    compile 'org.apache.logging.log4j:log4j-core:2.8.1'
    compile 'org.apache.logging.log4j:log4j-api:2.8.1'
    compile 'org.apache.logging.log4j:log4j-iostreams:2.8.1'

    // Console
    compile 'org.jline:jline-terminal-jna:3.3.1'
    compile 'net.java.dev.jna:jna:4.4.0'
    compile 'net.minecrell:terminalconsoleappender:1.0.0-SNAPSHOT'

    // Fastutil
    fastutil "it.unimi.dsi:fastutil:$fastutilVersion"

    // Database connectors
    compile 'com.zaxxer:HikariCP:2.6.3'
    compile 'org.mariadb.jdbc:mariadb-java-client:2.0.2'
    compile 'org.xerial:sqlite-jdbc:3.19.3'
    compile 'com.h2database:h2:1.4.196'

    // Scripting
    compile 'org.codehaus.groovy:groovy-all:2.4.11'

    // Asm
    compile 'org.ow2.asm:asm-all:5.2'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:2.8.47'
}

idea.module {
    // The java6 sourceset
    sourceDirs += file('src/java6/java')
}

runConfigurations {
    theConfig {
        name = 'Lantern Server'
        mainClass = 'org.lanternpowered.launch.LanternLaunch'
        workingDirectory = 'run'
    }
}

// The base jar, includes all the lantern and sponge classes,
// including generated event classes
jar {
    exclude 'log4j2.xml'
    rename 'log4j2_prod.xml', 'log4j2.xml'

    // Include the api classes
    from api.sourceSets.main.output
    // Include generated event classes
    from fileTree(api.tasks.genEventImpl.outputs.files.first())

    // Include the java 6 classes
    from sourceSets.java6.output
}

afterEvaluate {
    applyManifest(jar)
    applyManifest(fatJar)
}

void applyManifest(def jar) {
    jar.manifest {
        attributes(
                'Main-Class': 'org.lanternpowered.launch.VersionCheckingMain',
                'Implementation-Name': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.url,
                'Specification-Name': api.name,
                'Specification-Version': api.version,
                'Specification-Vendor': api.url
        )
        if (commit) attributes['Git-Commit'] = commit
        if (branch) attributes['Git-Branch'] = branch
    }
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

processResources {
    // Minimize the json files
    doLast {
        fileTree(dir: outputs.files.asPath, include: 'internal/*.json').each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

test {
    testLogging {
        exceptionFormat = 'full' // Always print full stack trace if something goes wrong in the unit tests
    }
}

// A task to minimize the fastutil jar to only
// include the classes we actually used
task fastutilJar(type: ShadowJar) {
    // The classifier
    classifier = 'fastutil'
    // Exclude empty directories
    includeEmptyDirs = false
    // Include all the fastutil classes into the process
    from zipTree(project.configurations.fastutil.first())

    // Loop through the files and check for the files which
    // should be included in the final jar
    transform(DependencyClassTransformer) {
        dependencyFiles.include 'it/unimi/dsi/fastutil/**'
        filesToScan.include 'it/unimi/dsi/fastutil/bytes/Byte2CharOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/bytes/Byte2ObjectOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/objects/Object2CharOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/objects/Object2IntMaps.class'
        filesToScan.include 'it/unimi/dsi/fastutil/objects/Object2IntOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/objects/Object2LongMaps.class'
        filesToScan.include 'it/unimi/dsi/fastutil/objects/Object2LongOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/objects/Object2ShortOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/chars/Char2ByteOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/chars/Char2IntOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/chars/Char2ObjectOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/ints/Int2ObjectMaps.class'
        filesToScan.include 'it/unimi/dsi/fastutil/ints/Int2ObjectLinkedOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/ints/Int2ObjectOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/ints/Int2LongOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/ints/IntArrayList.class'
        filesToScan.include 'it/unimi/dsi/fastutil/ints/IntLists.class'
        filesToScan.include 'it/unimi/dsi/fastutil/ints/IntOpenHashSet.class'
        filesToScan.include 'it/unimi/dsi/fastutil/shorts/Short2ObjectOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/shorts/Short2ShortOpenHashMap.class'
    }
}

// A task to build faster
task buildFast(dependsOn: build)

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    // Mark the fast util jar as not update to make it regenerate
    fastutilJar.outputs.upToDateWhen { graph.allTasks.contains(buildFast) && fastutilJar.archivePath.exists() }
}

task fatJar(type: Jar, dependsOn: [jar, fastutilJar]) {
    // Include the default jar
    from zipTree(jar.archivePath)

    // Always update the fat jar
    outputs.upToDateWhen { false }

    // Generate the dependencies
    classifier = 'fat'

    // All the entries that should be ignored
    Set<String> entries = []
    // Don't include the api again
    entries.add "$api.group:$api.name"
    entries.add "$testDataPacks.group:$testDataPacks.name"
    entries.add "$testPlugins.group:$testPlugins.name"
    // We already include 'asm-all'
    entries.add 'org.ow2.asm:asm'

    Map<String, Tuple2<Dependency, File>> filesMap = new HashMap<>()
    configurations.compile.resolvedConfiguration.resolvedArtifacts.each { a ->
        def id = a.moduleVersion.id
        def e = "$id.group:$id.name"
        // Check if we want the artifact, check for the java (String) and groovy strings (GString)
        if (!entries.contains(e) && !entries.contains((String) e)) {
            filesMap[(String) e] = new Tuple2<>(dependencies.create(id.toString()), a.file)
        }
    }

    // Replace the fastutil dependency
    filesMap['it.unimi.dsi:fastutil'] = new Tuple2<>(
            dependencies.create("it.unimi.dsi:fastutil:$fastutilVersion-minimized"), fastutilJar.archivePath)

    // Include all the dependencies
    for (Map.Entry<String, Tuple2<Dependency, File>> entry : filesMap.entrySet()) {
        Tuple2<Dependency, File> t = entry.value
        from (t.second, { spec ->
            Dependency d = t.first
            spec.rename {
                "libraries/${d.group.replace('.', '/')}/$d.name/$d.version/$d.name-${d.version}.jar"
            }
        })
    }
}

sourceJar {
    from sourceSets.java6.allSource

    from api.sourceSets.main.allSource
    from api.sourceSets.ap.allSource
}

// Run fatJar on build
assemble.dependsOn fatJar

// Gradle version used for generating the Gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}

// A custom update wrapper task, using a custom task prevents
// intellij from updating the wrapper constantly through
// the wrapper task
task updateWrapper(dependsOn: wrapper)

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    // Only enable the wrapper task if the updateWrapper task is run
    wrapper.enabled = graph.allTasks.contains(updateWrapper)
}