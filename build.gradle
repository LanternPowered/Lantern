// Gradle plugins
buildscript {
    repositories {
        maven {
            url = 'http://repo.spongepowered.org/maven'
        }
        maven {
            url = 'https://repo.eclipse.org/content/repositories/eclipse-staging'
        }
        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url = 'https://dl.bintray.com/lanternpowered/maven/'
        }
    }
    dependencies {
        classpath 'org.spongepowered:spongegradle:0.8.1-SNAPSHOT'
        classpath 'org.lanternpowered:lanterngradle:1.0.0'
        classpath 'org.apache.logging.log4j:log4j-core:2.8.1'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.17'
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.14.0"
    id "com.github.johnrengelman.shadow" version "1.2.4"
}

// Environment variables for the build set by the build server
ext {
    if (!project.hasProperty('artifactory_contextUrl')) artifactory_contextUrl = System.getenv('artifactory_contextUrl')
    if (!project.hasProperty('artifactory_username')) artifactory_username = System.getenv('artifactory_username')
    if (!project.hasProperty('artifactory_password')) artifactory_password = System.getenv('artifactory_password')
    buildNumber = System.env.BUILD_NUMBER ?: System.env.TRAVIS_BUILD_NUMBER ?: '0'
    ciSystem = System.env.CI_SYSTEM ?: (System.env.TRAVIS ? 'travis' : null)
    commit = System.env.GIT_COMMIT ?: System.env.TRAVIS_COMMIT
    branch = System.env.GIT_BRANCH ?: System.env.TRAVIS_BRANCH
}

// Apply plugin
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.lanternpowered.gradle'
apply plugin: 'org.lanternpowered.run-configs'

// Minimum version of Java required
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// Basic project information
group = 'org.lanternpowered'
archivesBaseName = 'lanternserver'
version = '1.0.0-SNAPSHOT'

defaultTasks 'licenseFormat', 'build'

// Repositories
repositories {
    mavenCentral()
    maven {
        url 'http://repo.spongepowered.org/maven'
    }
    maven {
        url 'https://oss.sonatype.org/content/groups/public'
    }
    maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

sourceSets {
    java6 {
        compileClasspath += main.compileClasspath + main.output
        runtimeClasspath += main.runtimeClasspath + main.output
    }
}

compileJava6Java {
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'
}

ext.api = project('SpongeAPI')

// Disable some tasks to make the building go faster
tasks.getByPath(':SpongeAPI:javadoc').enabled = false
tasks.getByPath(':SpongeAPI:javadocJar').enabled = false
tasks.getByPath(':SpongeAPI:checkstyleMain').enabled = false
tasks.getByPath(':SpongeAPI:checkstyleTest').enabled = false
// Disable this task to avoid that we turn the dependency
// dirty when we call this on our project
tasks.getByPath(':SpongeAPI:wrapper').enabled = false

evaluationDependsOn api.path

configurations {
    fastutil
    //noinspection All
    compile {
        extendsFrom fastutil
    }
}

// Project dependencies
dependencies {
    compile api

    // Launch Options
    compile 'net.sf.jopt-simple:jopt-simple:5.0.3'

    // Useful libraries
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.google.guava:guava:21.0'

    // Injection
    compile 'com.google.inject:guice:4.1.0'

    // Json library
    compile 'com.google.code.gson:gson:2.8.0'

    // Network
    compile 'io.netty:netty-all:4.1.11.Final'

    // Logging
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.1'
    compile 'org.apache.logging.log4j:log4j-core:2.8.1'
    compile 'org.apache.logging.log4j:log4j-api:2.8.1'
    compile 'org.apache.logging.log4j:log4j-iostreams:2.8.1'

    // Console
    compile 'org.jline:jline-terminal-jna:3.3.0'
    compile 'net.java.dev.jna:jna:4.4.0'
    compile 'net.minecrell:terminalconsoleappender:1.0.0-SNAPSHOT'

    // Fastutil
    fastutil 'it.unimi.dsi:fastutil:7.1.0'

    // Database connectors
    compile 'com.zaxxer:HikariCP:2.6.1'
    compile 'org.mariadb.jdbc:mariadb-java-client:1.6.0'
    compile 'org.xerial:sqlite-jdbc:3.16.1'
    compile 'com.h2database:h2:1.4.195'

    // Scripting
    compile 'org.codehaus.groovy:groovy-all:2.4.11'

    // Asm
    compile 'org.ow2.asm:asm-all:5.0.3'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:2.7.22'
}

idea.module {
    // The java6 sourceset
    sourceDirs += file('src/java6/java')
}

runConfigurations {
    theConfig {
        name = 'Lantern Server'
        mainClass = 'org.lanternpowered.server.LanternLaunch'
        workingDirectory = 'run'
        vmOptions = '-Dlog4j.configurationFile=log4j2_indev.xml'
    }
}

jar {
    classifier = 'base'
    exclude '**/*.max.json'
    from sourceSets.java6.output
    manifest {
        attributes(
                'Main-Class': 'org.lanternpowered.launch.VersionCheckingMain',
                'Implementation-Name': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.url,
                'Specification-Name': api.name,
                'Specification-Version': api.version,
                'Specification-Vendor': api.url
        )
    }
}

afterEvaluate {
    jar.manifest {
        attributes['Implementation-Version'] = project.version
        if (commit) attributes['Git-Commit'] = commit
        if (branch) attributes['Git-Branch'] = branch
    }
}

processResources {
    from 'LICENSE.txt'
}

test {
    testLogging {
        exceptionFormat = 'full' // Always print full stack trace if something goes wrong in the unit tests
    }
}

// A separate task to generate the fastutil jar,
// doing this separate to avoid long wait times
// Run "fastutilJar" to update the jar
task fastutilJar(type: ShadowJar) {
    // The classifier
    classifier = 'fastutil'
    // Exclude empty directories
    includeEmptyDirs = false
    // Include all the fastutil classes into the process
    from zipTree(project.configurations.fastutil.first())

    // Loop through the files and check for the files which
    // should be included in the final jar
    transform(DependencyClassTransformer) {
        dependencyFiles.include 'it/unimi/dsi/fastutil/**'
        filesToScan.include 'it/unimi/dsi/fastutil/bytes/Byte2CharOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/bytes/Byte2ObjectOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/objects/Object2CharOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/objects/Object2IntOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/objects/Object2IntMaps.class'
        filesToScan.include 'it/unimi/dsi/fastutil/objects/Object2LongOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/objects/Object2ShortOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/chars/Char2ByteOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/chars/Char2IntOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/chars/Char2ObjectOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/ints/Int2ObjectMaps.class'
        filesToScan.include 'it/unimi/dsi/fastutil/ints/Int2ObjectLinkedOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/ints/Int2ObjectOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/ints/Int2LongOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/ints/IntArrayList.class'
        filesToScan.include 'it/unimi/dsi/fastutil/ints/IntLists.class'
        filesToScan.include 'it/unimi/dsi/fastutil/ints/IntOpenHashSet.class'
        filesToScan.include 'it/unimi/dsi/fastutil/shorts/Short2ObjectOpenHashMap.class'
        filesToScan.include 'it/unimi/dsi/fastutil/shorts/Short2ShortOpenHashMap.class'
    }
}
// Sadly enough does the "overwrite: true" parameter not work,
// so this task will delete the jar before running fastutilJar
task deleteFastutilJar(type: Delete) {
    delete fastutilJar.archivePath
}
fastutilJar.dependsOn deleteFastutilJar

// A task to build faster
task buildFast(dependsOn: build)

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    if (graph.allTasks.contains(buildFast) && fastutilJar.archivePath.exists()) {
        fastutilJar.enabled = false
        deleteFastutilJar.enabled = false
    }
}

shadowJar {
    dependsOn fastutilJar

    // Empty classifier, this is the final jar
    classifier = ''
    // Exclude empty directories
    includeEmptyDirs = false
    // Include the java6 files
    from sourceSets.java6.output
    // Exclude source files
    exclude '**/*.java'
    exclude 'Version.java.template'
    exclude 'log4j2_indev.xml'
    exclude '**/*.max.json'

    from fileTree(api.tasks.genEventImpl.outputs.files.first())

    // Make sure that the jar is generated
    afterEvaluate {
        // Include the fastutil classes
        from zipTree(fastutilJar.archivePath)
    }

    dependencies {
        // SpongeAPI
        include project(api.path)
        include dependency('org.spongepowered:event-gen-core')
        include dependency('org.spongepowered:plugin-meta')

        include dependency('com.google.guava:guava')
        include dependency('com.google.code.findbugs:jsr305')
        include dependency('com.github.ben-manes.caffeine:caffeine')
        include dependency('com.github.ben-manes.caffeine:guava')
        include dependency('org.apache.commons:commons-lang3')
        include dependency('io.netty:netty-all')
        include dependency('org.codehaus.groovy:groovy-all')

        // Option Parsing
        include dependency('net.sf.jopt-simple:jopt-simple')

        // Bytecode
        include dependency('org.ow2.asm:asm-all')

        // Logging and Console
        include dependency('org.slf4j:slf4j-api')
        include dependency('org.apache.logging.log4j:log4j-slf4j-impl')
        include dependency('org.apache.logging.log4j:log4j-core')
        include dependency('org.apache.logging.log4j:log4j-api')
        include dependency('org.apache.logging.log4j:log4j-iostreams')
        include dependency('org.jline:jline-terminal')
        include dependency('org.jline:jline-terminal-jna')
        include dependency('org.jline:jline-reader')
        include dependency('net.java.dev.jna:jna')
        include dependency('net.minecrell:terminalconsoleappender')

        // Guice
        include dependency('com.google.inject:guice')
        include dependency('javax.inject:javax.inject')
        include dependency('aopalliance:aopalliance')

        // Math and Noise
        include dependency('com.flowpowered:flow-math')
        include dependency('com.flowpowered:flow-noise')

        // Configuration
        include dependency('ninja.leaping.configurate:configurate-core')
        include dependency('ninja.leaping.configurate:configurate-hocon')
        include dependency('ninja.leaping.configurate:configurate-gson')
        include dependency('ninja.leaping.configurate:configurate-yaml')
        include dependency('org.yaml:snakeyaml')
        include dependency('com.google.code.gson:gson')
        include dependency('com.typesafe:config')

        // Database
        include dependency('com.zaxxer:HikariCP')
        include dependency('org.mariadb.jdbc:mariadb-java-client')
        include dependency('com.h2database:h2')
        include dependency('org.xerial:sqlite-jdbc')

        mergeServiceFiles()

        // Merge the Log4j2Plugins.dat file properly
        transform(Log4jPluginCacheFileTransformer)
    }

    exclude 'LICENSE', 'NOTICE'
}

task sourceJar(type: Jar) {
    classifier = 'sources'

    from sourceSets.java6.allSource
    from sourceSets.main.allSource

    from api.sourceSets.main.allSource
    from api.sourceSets.ap.allSource
}

// Run shadowJar and sourceJar on build
assemble.dependsOn shadowJar
assemble.dependsOn sourceJar

if (artifactory_contextUrl && artifactory_username && artifactory_password) {
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'

    publishing {
        publications {
            thePublication(MavenPublication) {
                artifact shadowJar
                artifact sourceJar
                artifactId archivesBaseName
            }
        }
    }

    artifactory {
        contextUrl = "${artifactory_contextUrl}"
        publish {
            repository {
                repoKey = project.version.contains("SNAPSHOT") ? 'libs-snapshot-local' : 'libs-release-local'
                username = "${artifactory_username}"
                password = "${artifactory_password}"
                maven = true
            }
            defaults {
                publications('thePublication')
                publishArtifacts = true
            }
        }

        resolve {
            repository {
                repoKey = 'repo'
                username = "${artifactory_username}"
                password = "${artifactory_password}"
                maven = true
            }
        }
    }
    clientConfig.setIncludeEnvVars(true)
    clientConfig.info.setBuildNumber(buildNumber)
    if (ciSystem) clientConfig.info.addEnvironmentProperty('ci-system', ciSystem)
}

license {
    header rootProject.file('HEADER.txt')
    sourceSets = project.sourceSets
    include '**/*.java'

    strictCheck true
    ignoreFailures = false

    ext {
        name = rootProject.name
        urla = rootProject.url
        organizationa = rootProject.organization
        urlb = rootProject.api.url
        organizationb = rootProject.api.organization
    }

    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

// Gradle version used for generating the Gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}
